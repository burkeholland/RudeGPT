@page "/"

@using System.Text
@using System.Text.Json
@using Azure.AI.OpenAI
@using RudeGPT.Shared

@inject HttpClient Http
@inject IJSRuntime JSRuntwaime
@inject StateContainer StateContainer

<div class="is-flex-grow-1 no-scrollbar">
  <NavBar OnSideBarIconClick="@OpenSideBar"></NavBar>
  <div class="columns is-full-height is-gapless is-relative is-mobile">
    <div class="column is-full-height is-narrow">
      <Sidebar sidebarIsOpen="@sidebarIsOpen"></Sidebar>
    </div>
    <div class="column is-flex is-flex-direction-column">
      <p class="level-item has-text-centered pt-3 pb-3">
      RudeGPT 3.5 Turbo
      </p>
      <hr class="mt-0 mb-4" />
      <div id="thread" class="overflow-scroll is-flex-grow-1 no-scrollbar">
        @foreach (var chatMessage in StateContainer.ChatSession.Messages)
        {
          <MessageItem chatMessage="@chatMessage"></MessageItem>
        }
      </div>
      <footer>
        <ChatBox OnUserMessageSubmit="@GetCompletion"></ChatBox>
      </footer>
    </div>
  </div>
  <div id="overlay" @onclick="() => sidebarIsOpen = false" class="@OverlayClass"></div>
</div>

@code {

  private bool sidebarIsOpen = false;

  private string OverlayClass => sidebarIsOpen ? "is-visible" : "";

  private void OpenSideBar()
  {
    sidebarIsOpen = true;
  }

  protected override void OnInitialized()
  {
    StateContainer.OnChange += ToggleSidebar;
  }

  private void ToggleSidebar()
  {
    sidebarIsOpen = false;
    StateHasChanged();
  }

  private async Task GetCompletion(string message)
  {
    // add the user message to the messages list
    StateContainer.ChatSession.Messages.Add(new Message { Role = ChatRole.User, Content = message });

    // create a new assistant message that serves as a placeholder until the response is received
    var assistantMessage = new Message { Role = ChatRole.Assistant, Content = "..." };

    StateContainer.ChatSession.Messages.Add(assistantMessage);

    // call the /api/completions endpoint and pass in the messages object
    var response = await Http.PostAsJsonAsync<List<Message>>("api/completions", StateContainer.ChatSession.Messages);
    if (response.Content is not null)
    {
      var responseContent = await response.Content.ReadAsStringAsync();
      var content = JsonSerializer.Deserialize<string>(responseContent);

      assistantMessage.Content = content;
    }

    // if there are only 2 items in the StateContainer.ChatSession.Messages list, add it to the chatHistory list
    if (StateContainer.ChatSession.Messages.Count == 2)
    {
      // get the first four words of the first message as the title
      StateContainer.ChatSession.Title = StateContainer.ChatSession.Messages[0].Content.Split(' ').Take(4).Aggregate((a, b) =>
      $"{a} {b}");

      StateContainer.AddToChatHistory(StateContainer.ChatSession);
    }

    StateContainer.SaveHistoryToLocalStorage();
  }

  public void Dispose()
  {
    StateContainer.OnChange -= StateHasChanged;
  }
}
